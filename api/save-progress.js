import fetch from "node-fetch";

const GITHUB_SAVE_PROGRESS_URL = "https://api.github.com/repos/OnToanAnhDuong/LuyenToan6/contents/data/progress.json";

export default async function (req, res) {
    if (req.method !== "POST") {
        return res.status(405).json({ error: "‚ùå Ph∆∞∆°ng th·ª©c kh√¥ng h·ª£p l·ªá! Ch·ªâ h·ªó tr·ª£ POST." });
    }

    // üîπ L·∫•y token t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
    const GITHUB_TOKEN = process.env.GITHUB_TOKEN;
    if (!GITHUB_TOKEN) {
        return res.status(500).json({ error: "‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y GITHUB_TOKEN trong m√¥i tr∆∞·ªùng!" });
    }

    try {
        // 1Ô∏è‚É£ üü¢ L·∫•y d·ªØ li·ªáu t·ª´ request
        const { studentId, problemId, score } = req.body;
        if (!studentId || !problemId) {
            return res.status(400).json({ error: "‚ùå Thi·∫øu studentId ho·∫∑c problemId!" });
        }

        console.log(`üìå ƒêang c·∫≠p nh·∫≠t ti·∫øn tr√¨nh cho h·ªçc sinh: ${studentId} (B√†i: ${problemId})`);

        // 2Ô∏è‚É£ üü¢ L·∫•y n·ªôi dung hi·ªán t·∫°i c·ªßa progress.json t·ª´ GitHub
        const response = await fetch(GITHUB_SAVE_PROGRESS_URL, {
            method: "GET",
            headers: {
                "Authorization": `token ${GITHUB_TOKEN}`,
                "Accept": "application/vnd.github.v3+json"
            }
        });

        if (!response.ok) {
            throw new Error(`‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu progress.json: ${response.statusText}`);
        }

        const fileData = await response.json();
        const sha = fileData.sha; // L·∫•y SHA ƒë·ªÉ c·∫≠p nh·∫≠t file
        const currentContent = JSON.parse(Buffer.from(fileData.content, "base64").toString("utf-8"));

        // 3Ô∏è‚É£ üü¢ C·∫≠p nh·∫≠t d·ªØ li·ªáu ti·∫øn tr√¨nh h·ªçc sinh
        if (!currentContent[studentId]) {
            currentContent[studentId] = {
                completedExercises: 0,
                totalScore: 0,
                averageScore: 0,
                problemsDone: [] // ‚úÖ Th√™m danh s√°ch b√†i t·∫≠p ƒë√£ gi·∫£i (d∆∞·ªõi d·∫°ng s·ªë)
            };
        }

        let studentProgress = currentContent[studentId];

        // Ki·ªÉm tra n·∫øu b√†i t·∫≠p ch∆∞a c√≥ trong danh s√°ch -> th√™m m·ªõi
        if (!studentProgress.problemsDone.includes(problemId)) {
            studentProgress.problemsDone.push(problemId);
            studentProgress.completedExercises++;
            studentProgress.totalScore += score;
            studentProgress.averageScore = studentProgress.totalScore / studentProgress.completedExercises;
        }

        // 4Ô∏è‚É£ üü¢ Chuy·ªÉn d·ªØ li·ªáu th√†nh Base64 tr∆∞·ªõc khi ghi l·∫°i
        const updatedContent = Buffer.from(JSON.stringify(currentContent, null, 2)).toString("base64");

        // 5Ô∏è‚É£ üü¢ Ghi d·ªØ li·ªáu m·ªõi l√™n GitHub
        const updateResponse = await fetch(GITHUB_SAVE_PROGRESS_URL, {
            method: "PUT",
            headers: {
                "Authorization": `token ${GITHUB_TOKEN}`,
                "Accept": "application/vnd.github.v3+json",
                "Content-Type": "application/json"
            },
            body: JSON.stringify({
                message: `C·∫≠p nh·∫≠t ti·∫øn tr√¨nh h·ªçc sinh ${studentId} (B√†i ${problemId})`,
                content: updatedContent,
                sha: sha
            })
        });

        if (!updateResponse.ok) {
            throw new Error(`‚ùå L·ªói khi c·∫≠p nh·∫≠t progress.json: ${updateResponse.statusText}`);
        }

        console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t ti·∫øn tr√¨nh c·ªßa h·ªçc sinh ${studentId}`);
        return res.status(200).json({ message: "‚úÖ C·∫≠p nh·∫≠t ti·∫øn tr√¨nh th√†nh c√¥ng!" });

    } catch (error) {
        console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t ti·∫øn tr√¨nh:", error);
        return res.status(500).json({ error: error.message });
    }
}
