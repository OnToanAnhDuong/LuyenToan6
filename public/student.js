document.addEventListener("DOMContentLoaded", async () => {
    console.log("üìå ƒêang t·∫£i giao di·ªán h·ªçc sinh...");
    await initStudentPage();
});

// üöÄ H√†m kh·ªüi ƒë·ªông giao di·ªán h·ªçc sinh
async function initStudentPage() {
    const currentStudentId = localStorage.getItem("studentId");
    if (!currentStudentId) {
        alert("‚ö† B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p. Vui l√≤ng quay l·∫°i trang ch√≠nh ƒë·ªÉ ƒëƒÉng nh·∫≠p.");
        window.location.href = "index.html"; // Quay v·ªÅ trang ƒëƒÉng nh·∫≠p
        return;
    }

    console.log(`üîÑ ƒêang t·∫£i d·ªØ li·ªáu cho h·ªçc sinh: ${currentStudentId}`);
    
    await loadProgress(currentStudentId);
    await fetchProblems();
    await displayProblemList();

    // G√°n s·ª± ki·ªán cho n√∫t ch·∫•m b√†i
    document.getElementById("submitBtn").addEventListener("click", handleSubmit);
}

// üì• H√†m t·∫£i danh s√°ch b√†i t·∫≠p t·ª´ JSON
async function fetchProblems() {
    try {
        const response = await fetch("/data/problems.json");
        if (!response.ok) throw new Error("L·ªói t·∫£i danh s√°ch b√†i t·∫≠p.");
        const problems = await response.json();
        console.log("‚úÖ Danh s√°ch b√†i t·∫≠p ƒë√£ t·∫£i:", problems);
    } catch (error) {
        console.error("‚ùå L·ªói khi t·∫£i b√†i t·∫≠p:", error);
    }
}

// üìú Hi·ªÉn th·ªã danh s√°ch b√†i t·∫≠p
async function displayProblemList() {
    try {
        const response = await fetch("/data/progress.json");
        if (!response.ok) throw new Error("L·ªói t·∫£i ti·∫øn tr√¨nh.");
        const progressData = await response.json();

        const problemContainer = document.getElementById("problemList");
        problemContainer.innerHTML = ""; // X√≥a danh s√°ch c≈©

        for (const [index, problem] of Object.entries(progressData)) {
            const problemBox = document.createElement("div");
            problemBox.textContent = `B√†i ${index}`;
            problemBox.className = "problem-box";

            // C·∫≠p nh·∫≠t m√†u s·∫Øc b√†i t·∫≠p
            if (problem.completed) {
                problemBox.style.backgroundColor = "green"; // ƒê√£ l√†m
            } else {
                problemBox.style.backgroundColor = "yellow"; // Ch∆∞a l√†m
            }

            // Khi h·ªçc sinh ch·ªçn b√†i
            problemBox.addEventListener("click", () => {
                if (problem.completed) {
                    alert("üìå B√†i t·∫≠p n√†y ƒë√£ l√†m! Vui l√≤ng ch·ªçn b√†i t·∫≠p kh√°c.");
                } else {
                    loadProblem(index);
                    problemBox.style.backgroundColor = "blue"; // M√†u xanh khi h·ªçc sinh ƒëang l√†m b√†i
                }
            });

            problemContainer.appendChild(problemBox);
        }
    } catch (error) {
        console.error("‚ùå L·ªói khi hi·ªÉn th·ªã danh s√°ch b√†i t·∫≠p:", error);
    }
}

// üìñ Hi·ªÉn th·ªã b√†i t·∫≠p theo s·ªë th·ª© t·ª±
async function loadProblem(problemIndex) {
    try {
        const response = await fetch("/data/problems.json");
        if (!response.ok) throw new Error("L·ªói t·∫£i b√†i t·∫≠p.");
        const problems = await response.json();

        const selectedProblem = problems[problemIndex];
        if (selectedProblem) {
            document.getElementById("problemText").innerHTML = selectedProblem.text;
        } else {
            document.getElementById("problemText").textContent = "Kh√¥ng t√¨m th·∫•y b√†i t·∫≠p.";
        }
    } catch (error) {
        console.error("‚ùå L·ªói khi t·∫£i b√†i t·∫≠p:", error);
    }
}

// üìù Ch·∫•m b√†i
async function handleSubmit() {
    const problemText = document.getElementById("problemText")?.innerHTML?.trim();
    if (!problemText) {
        alert("Vui l√≤ng ch·ªçn b√†i t·∫≠p tr∆∞·ªõc khi ch·∫•m.");
        return;
    }

    try {
        document.getElementById("result").innerText = "ƒêang ch·∫•m b√†i...";
        const score = Math.floor(Math.random() * 10) + 1; // Gi·∫£ l·∫≠p ch·∫•m ƒëi·ªÉm ng·∫´u nhi√™n

        alert(`‚úÖ B√†i t·∫≠p ƒë√£ ch·∫•m xong. ƒêi·ªÉm: ${score}`);
        updateProgress(score);
    } catch (error) {
        console.error("‚ùå L·ªói khi ch·∫•m b√†i:", error);
        alert("‚ùå L·ªói khi ch·∫•m b√†i.");
    }
}

// üìä C·∫≠p nh·∫≠t ti·∫øn tr√¨nh
async function updateProgress(score) {
    try {
        const response = await fetch("/data/progress.json");
        const progressData = await response.json();

        // L∆∞u ti·∫øn tr√¨nh
        progressData[currentStudentId] = progressData[currentStudentId] || {};
        progressData[currentStudentId].completed = true;
        progressData[currentStudentId].score = score;

        await saveProgress(progressData);
        console.log("‚úÖ Ti·∫øn tr√¨nh ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t:", progressData);
    } catch (error) {
        console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t ti·∫øn tr√¨nh:", error);
    }
}

// üíæ L∆∞u ti·∫øn tr√¨nh v√†o JSON
async function saveProgress(progressData) {
    try {
        const response = await fetch("/api/save-progress", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(progressData),
        });

        if (!response.ok) throw new Error("L·ªói khi l∆∞u ti·∫øn tr√¨nh.");
        console.log("‚úÖ Ti·∫øn tr√¨nh ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng.");
    } catch (error) {
        console.error("‚ùå L·ªói khi l∆∞u ti·∫øn tr√¨nh:", error);
    }
}
