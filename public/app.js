document.addEventListener('DOMContentLoaded', async () => {
    await loadStudents();
    await loadProgress();
    await fetchProblems();
    displayProblemList();
});

// Ch·ªçn b√†i t·∫≠p v√† hi·ªÉn th·ªã
async function selectProblem(problemIndex) {
    if (progressData[currentStudentId]?.problems?.includes(problemIndex)) {
        alert("üìå B√†i t·∫≠p n√†y ƒë√£ l√†m! B·∫°n c√≥ th·ªÉ ch·ªçn b√†i t·∫≠p kh√°c ho·∫∑c l√†m b√†i t∆∞∆°ng t·ª±.");
        return;
    }

    currentProblem = problems.find(p => p.index === problemIndex);
    document.getElementById('problemText').innerHTML = formatProblemText(currentProblem.problem);
    updateProblemColor(problemIndex);
}

// Ch·∫•m b√†i, l∆∞u ti·∫øn tr√¨nh
document.getElementById('submitBtn').addEventListener('click', async () => {
    const problemText = document.getElementById('problemText').innerHTML.trim();
    if (!problemText || !base64Image) {
        alert('‚ö† Vui l√≤ng ch·ªçn b√†i v√† t·∫£i ·∫£nh b√†i l√†m.');
        return;
    }

    try {
        const { studentAnswer, feedback, score } = await gradeWithGemini(base64Image, problemText, currentStudentId);
        document.getElementById('result').innerHTML = feedback;
        await updateStudentProgress(currentStudentId, score);
        progressData[currentStudentId].problems.push(currentProblem.index);
        await saveProgress();
        alert('‚úÖ B√†i t·∫≠p ƒë√£ ƒë∆∞·ª£c ch·∫•m!');
    } catch (error) {
        console.error('‚ùå L·ªói ch·∫•m b√†i:', error);
    }
});

// ƒê·ªãnh d·∫°ng b√†i t·∫≠p
function formatProblemText(text) {
    return text.replace(/\n/g, '<br>').replace(/([a-d]\))/g, '<br>$1');
}
